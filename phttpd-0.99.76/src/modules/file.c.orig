/*
** file.c
**
** Copyright (c) 1994-1995 Peter Eriksson <pen@signum.se>
**
** This program is free software; you can redistribute it and/or modify
** it under the terms of the GNU General Public License as published by
** the Free Software Foundation; either version 2 of the License, or
** (at your option) any later version.
**
** This program is distributed in the hope that it will be useful,
** but WITHOUT ANY WARRANTY; without even the implied warranty of
** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
** GNU General Public License for more details.
** You should have received a copy of the GNU General Public License
** along with this program; if not, write to the Free Software
** Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
*/

#include <stdio.h>
#include <time.h>
#include <string.h>
#include <fcntl.h>
#include <unistd.h>
#include <errno.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <sys/mman.h>

#include "phttpd.h"


static hashtable_t *content_types_table = NULL;
static hashtable_t *content_encodings_table = NULL;
static char *default_type = NULL;
static int method_put = 0;
static int method_delete = 0;


static struct options file_cfg_table[] =
{
    { "content-types",     T_HTABLE, &content_types_table,	NULL },
    { "content-encodings", T_HTABLE, &content_encodings_table,	NULL },
    
    { "default-type",	   T_STRING, &default_type,             NULL },
    
    { "method-put",        T_BOOL,   &method_put,		NULL },
    { "method-delete",     T_BOOL,   &method_delete,		NULL },
    
    { NULL,                -1,       NULL,			NULL }
};



static int get_content_type(const char *path,
			    const struct stat *sp,
			    char *type,
			    int typesize,
			    char *encoding,
			    int encsize)
{
    char *suffix;
    hashentry_t *hep;
    int len;
    

    type[0] = '\0';
    if (encoding)
	encoding[0] = '\0';
    
    if (debug > 2)
	fprintf(stderr, "*** get_content_type(\"%s\", ...)\n", path);
    
    if (content_types_table == NULL)
    {
	if (debug > 2)
	    fprintf(stderr, "\t-> Content type unknown (NULL table).\n");

	s_strcpy(type, typesize, default_type);
	return 0;
    }


    /* Get suffix */
    suffix = strrchr(path, '.');
    if (suffix == NULL)
    {
	s_strcpy(type, typesize, default_type);
	return 0;
    }

    len = 0;
    
    if (encoding && content_encodings_table)
    {
	hep = ht_lookup(content_encodings_table, suffix, len);

	if (hep)
	{
	    s_strcpy(encoding, encsize, hep->data);

	    if (debug > 2)
		fprintf(stderr, "\t -> Encoding found: %s\n", encoding);

	    ht_release(hep);

	    if (suffix > path)
	    {
		char *cp;
		
		suffix--;
		for (cp = suffix-1; cp > path && *cp != '.'; cp--)
		    ;
		
		len = suffix - cp+1 ;
		suffix = cp;
		
		if (debug > 1)
		    fprintf(stderr, "file: new suffix: len = %d, str=%.*s\n",
			    len, len, suffix);
	    }
	}
    }

    hep = ht_lookup(content_types_table, suffix, len);
    if (hep)
    {
	s_strcpy(type, typesize, hep->data);
	ht_release(hep);
	
	if (debug > 2)
	    fprintf(stderr, "\t -> Content-Type found: %s\n", type);

	return 0;
    }
    
    if (debug > 2)
	fprintf(stderr, "\t-> Content type unknown.\n");
    
    s_strcpy(type, typesize, default_type);
    return 0;
}

int pm_init(const char **argv)
{
    char *cfg_path, *cp;
    const char *name = argv[0];
    int cfgsize;

    
    if (debug > 1)
	fprintf(stderr, "*** file/pm_init(\"%s\") called ***\n", name);

    cfgsize = strlen(name)+6;
    cfg_path = s_malloc(cfgsize);
    s_strcpy(cfg_path, cfgsize, name);
    
    cp = strrchr(cfg_path, '.');
    if (cp && strcmp(cp, ".so") == 0)
	*cp = '\0';
    
    s_strcat(cfg_path, cfgsize, ".conf");
    if (config_parse_file(cfg_path, file_cfg_table, 0) < 0)
	return -1;
    
    if (config_parse_argv(argv+1, file_cfg_table) < 0)
	return -1;
    
    if (default_type == NULL)
	default_type = s_strdup("unknown");

    return 0;
}


void pm_exit(void)
{
    if (debug > 1)
	fprintf(stderr, "*** file/pm_exit() called ***\n");

    if (content_types_table)
    {
	ht_destroy(content_types_table);
	s_free(content_types_table);
    }

    if (content_encodings_table)
    {
	ht_destroy(content_encodings_table);
	s_free(content_encodings_table);
    }

    if (default_type)
	s_free(default_type);
    
    if (debug > 1)
	fprintf(stderr, "*** file/pm_exit() done ***\n");
}



static int http_get_head(struct connectioninfo *cip)
{
    char typebuf[256], buf[256], encbuf[256], ubuf[1024], *s_since;
    int i, result, head_method = 0;
    int fd = cip->fd;
    struct httpinfo *hip = cip->hip;
    fscentry_t *fep;
    fsinfo_t *fip;
    unsigned int fsc_flags = 0;
    u_long addr;      
    struct hostent *hp, hb;
    char hb_buf[1024];
    char bufx[2048];    
    int h_errno;
    
    
    if (debug > 1)
	fprintf(stderr, "*** file/pm_get() called ***\n");

    if (hip && hip->mip && (hip->mip->pragma_flags & MPF_NOCACHE))
	fsc_flags = FSCF_RELOAD;
    
    fep = fscache_lookup(hip->url, fsc_flags);
    if (fep == NULL)
	return -1;

    if (fep->fip == NULL)
    {
	fscache_release(fep);
	return -1;
    }

    fip = fep->fip;
    
    if (S_ISDIR(fip->sb.st_mode))
    {
	/* RK YES I KNOW, IT IS A HACK -- should create own .c file */
	/* Need to rewrite 'SERVER_URL' , will use bufx instead of server_url */
	if ( rkmultimode ) 
	{
	    addr=cip->serverif;
	    hp = s_gethostbyaddr_r((char *)&addr, sizeof (addr), AF_INET,
				   &hb, hb_buf, sizeof(hb_buf), &h_errno);
	    
	    if ( hp != NULL )
	    {
		s_strcpy(bufx, sizeof(bufx), "http://");
		s_strcat(bufx, sizeof(bufx), hp->h_name);
		
		if (server_port != 80)
		{
		    int len;
		    
		    len = s_strcat(bufx, sizeof(bufx), ":");
		    s_sprintf(bufx+len, sizeof(bufx)-len, "%d", server_port);
		}
	    }
	}

	if (!rkmultimode)
	    s_strcpy(ubuf, sizeof(ubuf), server_url);
	else
	    s_strcpy(ubuf, sizeof(ubuf), bufx);
	
	s_strcat(ubuf, sizeof(ubuf), hip->url+cip->vspl);
	fscache_release(fep);
	return http_redirect(cip, ubuf, hip->request, NULL, 301);
    }

    if (get_content_type(fip->path, &fip->sb, typebuf, sizeof(typebuf),
			 encbuf, sizeof(encbuf)))
    {
	fscache_release(fep);
	return -1;
    }

    if ((s_since = mime_getheader(hip->mip, "IF-MODIFIED-SINCE", 1)) != NULL)
    {
        struct tm tm_since;
	int t_since;


	if (debug > 2)
	    fprintf(stderr, "Got If-Modified-Since: %s\n", s_since);
	
	t_since = atotm(s_since, &tm_since);
	if (t_since != -1)
	{
	    if (fip->sb.st_mtime <= (time_t) t_since)
	    {
		fscache_release(fep);
	        return http_not_modified(cip);
	    }
	}
	else
	{
	    /* Could not parse the date format - do a string compare */
	    http_time_r(&fip->sb.st_mtime, buf, sizeof(buf));
	    i = strlen(buf);
	    buf[i-1] = '\0';
	    
	    if (strcmp(s_since, buf) == 0)
	    {
		fscache_release(fep);
	        return http_not_modified(cip);
	    }
	}
    }

    if (strcasecmp(hip->method, "HEAD") == 0)
	head_method = 1;
    else
	if (fscache_getdata(fep) != 1)
	{
	    if (debug > 1)
		fprintf(stderr, "fscache_getdata(): failed\n");
	    
	    fscache_release(fep);
	    return -1;
	}
    
    result = 200;
    if (hip->mip != NULL)
    {
	http_sendheaders(fd, cip, result, NULL);
	http_sendlastmodified(fd, fip->sb.st_mtime);
	
	if (typebuf[0])
	    fd_puts2nl("Content-Type: ", typebuf, fd);
	
	if (encbuf[0])
	    fd_puts2nl("Content-Encoding: ", encbuf, fd);

	fd_putsinl("Content-Length: ", (int) fip->sb.st_size, fd);

	http_sendlang(fd, hip->url);

	fd_putc('\n', fd);
    }

    if (head_method)
    {
	fscache_release(fep);
	return result;
    }
    
    hip->length = fip->sb.st_size;
    
    if (fd_write(fd, fip->data.file.content, fip->sb.st_size) < 0)
	if (debug)
	{
	    fprintf(stderr, "ERROR on #%d: ", cip->request_no);
	    perror("write");
	}

    fscache_release(fep);
    
    if (debug > 2)
	fprintf(stderr, "*** file/http_get: Returning\n");
    
    return result;
}


static int http_delete(struct connectioninfo *cip)
{
    char path[1025];
    struct stat sb;
    struct httpinfo *hip = cip->hip;
    
    if (debug > 1)
        fprintf(stderr, "*** file/pm_delete() called ***\n");

    if (url_expand(hip->url, path, sizeof(path), &sb, NULL, NULL) == NULL)
        return -1;
    
    unlink(path);
    
    return 200;
}


static int http_put(struct connectioninfo *cip)
{
    char buf[2048], path[1025];
    char *pclen;
    struct stat sb;
    int fd_out, len, result, clen;
    int fd = cip->fd;
    struct httpinfo *hip = cip->hip;
    
    
    if (debug > 1)
	fprintf(stderr, "*** file/pm_put() called ***\n");
    
    if (url_expand(hip->url, path, sizeof(path), &sb, NULL, NULL) == NULL)
	return -1;
    
    if (S_ISDIR(sb.st_mode))
    {
	s_strcpy(path, sizeof(path), server_url);
	s_strcat(path, sizeof(path), hip->url);
	s_strcat(path, sizeof(path), "/");
	
	return http_redirect(cip, path, hip->request, NULL, 301);
    }

    fd_out = fd_open(path, O_WRONLY+O_CREAT, 0644);
    if (fd_out < 0)
	return error_system(cip, "do_putpost(): open()");

    pclen=mime_getheader(hip->mip, "CONTENT-LENGTH", 1);
    clen= ( pclen != NULL ) ? atoi(pclen) : 0 ;

    if (debug > 4)
	fprintf(stderr, "*** file/pm_put() Bytes %d \n", clen );

    if ( clen > 0 ) 
	while ( clen > 0 )
	{   
	    len = fd_read(fd, buf, (sizeof(buf)<clen)? sizeof(buf) : clen );
	    if (fd_write(fd_out, buf, len) != 0) /* BUG: must be 0, !len RK */
	    {
		fd_close(fd_out);
		return error_system(cip, "do_putpost(): cwrite()");
	    }
	    clen=clen-len;
	}
    else
	while ((len = fd_read(fd, buf, sizeof(buf))) > 0 )
	{
	    if (fd_write(fd_out, buf, len) != len)
	    {
		fd_close(fd_out);
		return error_system(cip, "do_putpost(): write()");
	    }
	}
    
    hip->length = fd_close(fd_out);
    
    result = 200;
    
    if (hip->mip != NULL)
    {
	http_sendheaders(fd, cip, result, NULL);
	
	http_sendlastmodified(fd, sb.st_mtime);
	fd_puts("Content-Type: text/html\n\n", fd);
    }
    
    html_sysheader(fd, "H2", "Succeded");
    fd_puts("OK\n", fd);
    html_sysfooter(fd);

    if (debug > 2)
	fprintf(stderr, "*** file/http_put: Returning\n");
    
    return result;
}


int pm_request(struct connectioninfo *cip)
{
    struct httpinfo *hip = cip->hip;
    
    if (strcasecmp(hip->method, "GET") == 0 ||
	strcasecmp(hip->method, "HEAD") == 0)
	return http_get_head(cip);
    else if (strcasecmp(hip->method, "PUT") == 0 )
    {
	if (method_put==1)
	    return http_put(cip);
	else
	    return -405;
    }
    else
	if (strcasecmp(hip->method, "DELETE") == 0 )
	{
	    if (method_put && method_delete)
		return http_delete(cip);
	    else
		return -405;
	}
	else
	    return -2;
}
